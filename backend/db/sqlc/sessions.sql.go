// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: sessions.sql

package db

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    user_id,
    current_question_id
)
VALUES (
    $1, $2
)
RETURNING id, user_id, current_question_id, started_at, completed_at
`

type CreateSessionParams struct {
	UserID            int32         `json:"user_id"`
	CurrentQuestionID sql.NullInt32 `json:"current_question_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Sessions, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.UserID, arg.CurrentQuestionID)
	var i Sessions
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CurrentQuestionID,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, current_question_id, started_at, completed_at FROM sessions
WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id int32) (Sessions, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Sessions
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CurrentQuestionID,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT id, user_id, current_question_id, started_at, completed_at FROM sessions
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSessionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSessions(ctx context.Context, arg ListSessionsParams) ([]Sessions, error) {
	rows, err := q.db.QueryContext(ctx, listSessions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sessions
	for rows.Next() {
		var i Sessions
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CurrentQuestionID,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :exec
UPDATE sessions
SET current_question_id = $2
WHERE id = $1
RETURNING id, user_id, current_question_id, started_at, completed_at
`

type UpdateSessionParams struct {
	ID                int32         `json:"id"`
	CurrentQuestionID sql.NullInt32 `json:"current_question_id"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession, arg.ID, arg.CurrentQuestionID)
	return err
}
