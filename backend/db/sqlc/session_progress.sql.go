// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: session_progress.sql

package db

import (
	"context"
	"database/sql"
)

const createSessionProgress = `-- name: CreateSessionProgress :one
INSERT INTO session_progress (
    session_id,
    question_id,
    is_answered,
    answered_at
)
VALUES (
    $1, $2, $3, $4
)
RETURNING id, session_id, question_id, is_answered, answered_at
`

type CreateSessionProgressParams struct {
	SessionID  int32        `json:"session_id"`
	QuestionID int32        `json:"question_id"`
	IsAnswered bool         `json:"is_answered"`
	AnsweredAt sql.NullTime `json:"answered_at"`
}

func (q *Queries) CreateSessionProgress(ctx context.Context, arg CreateSessionProgressParams) (SessionProgress, error) {
	row := q.db.QueryRowContext(ctx, createSessionProgress,
		arg.SessionID,
		arg.QuestionID,
		arg.IsAnswered,
		arg.AnsweredAt,
	)
	var i SessionProgress
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.QuestionID,
		&i.IsAnswered,
		&i.AnsweredAt,
	)
	return i, err
}

const deleteSessionProgress = `-- name: DeleteSessionProgress :exec
DELETE FROM session_progress
WHERE id = $1
`

func (q *Queries) DeleteSessionProgress(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSessionProgress, id)
	return err
}

const getSessionProgress = `-- name: GetSessionProgress :one
SELECT id, session_id, question_id, is_answered, answered_at FROM session_progress
WHERE id = $1
`

func (q *Queries) GetSessionProgress(ctx context.Context, id int32) (SessionProgress, error) {
	row := q.db.QueryRowContext(ctx, getSessionProgress, id)
	var i SessionProgress
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.QuestionID,
		&i.IsAnswered,
		&i.AnsweredAt,
	)
	return i, err
}

const listSessionProgress = `-- name: ListSessionProgress :many
SELECT id, session_id, question_id, is_answered, answered_at FROM session_progress
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSessionProgressParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSessionProgress(ctx context.Context, arg ListSessionProgressParams) ([]SessionProgress, error) {
	rows, err := q.db.QueryContext(ctx, listSessionProgress, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionProgress
	for rows.Next() {
		var i SessionProgress
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.QuestionID,
			&i.IsAnswered,
			&i.AnsweredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionProgress = `-- name: UpdateSessionProgress :exec
UPDATE session_progress
SET is_answered = $2, answered_at = $3
WHERE id = $1
RETURNING id, session_id, question_id, is_answered, answered_at
`

type UpdateSessionProgressParams struct {
	ID         int32        `json:"id"`
	IsAnswered bool         `json:"is_answered"`
	AnsweredAt sql.NullTime `json:"answered_at"`
}

func (q *Queries) UpdateSessionProgress(ctx context.Context, arg UpdateSessionProgressParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionProgress, arg.ID, arg.IsAnswered, arg.AnsweredAt)
	return err
}
